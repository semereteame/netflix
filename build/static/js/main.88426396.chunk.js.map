{"version":3,"sources":["axios.js","Row.js","requst.js","Banner.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","Setmoives","trailerUrl","setTrailerUrl","fetchData","a","get","response","data","results","useEffect","className","map","movie","onClick","console","log","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","err","clickHandler","key","id","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requets","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","setMoive","fetch","request","resp","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","orignal_name","overview","Nav","show","setShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.88426396.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n     baseURL:'https://api.themoviedb.org/3'\n})\nexport default instance","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\n\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n  const [movies, Setmoives] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const fetchData = async () => {\n    let response = await axios.get(fetchUrl);\n    Setmoives(response.data.results);\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n  const clickHandler = (movie) => {\n    console.log(movie);\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  return (\n    <div className=\"row\">\n      <h1>{title}</h1>\n      <div className=\"row__posters\">\n        {movies.map((movie) => {\n          return (\n            <img\n            onClick={()=>clickHandler(movie)}\n              key={movie.id}\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n              src={`${baseURL}${\n                isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n              alt={movie.name}\n            />\n          );\n        })}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n};\n\nexport default Row;\n","const API_KEY = \"0c09b9e131fea38ddfff2681a1485bb8\";\n\nconst requets = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\nexport default requets;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport request from \"./requst\";\nimport \"./Banner.css\";\nconst Banner = () => {\n  const [movie, setMoive] = useState([]);\n \n\n  const fetch = async () => {\n    let resp = await axios.get(request.fetchNetflixOriginals);\n    setMoive(\n      resp.data.results[\n        Math.floor(Math.random() * (resp.data.results.length - 1))\n      ]\n    );\n  };\n  useEffect(() => {\n    \n    fetch();\n   \n  }, []);\n\n  console.log(movie);\n\n  const truncate = (str, n) => {\n    return str.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  };\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n            \"https://image.tmdb.org/t/p/original/${movie.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.orignal_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">{movie?.overview}</h1>\n      </div>\n      <div className=\"banner__fade\" />\n    </header>\n  );\n};\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport \"./NavBar.css\";\nconst Nav = () => {\n  const [show, setShow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        setShow(true);\n      } else {\n        setShow(false);\n      }\n    });\n    return ()=>{\n        window.removeEventListener(\"scroll\")\n    }\n  }, []);\n\n\n  return (\n    <div className={`nav ${show && \"nav__black\" }`}>\n      <img\n        className=\"nav__logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/2880px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflixlog\"\n      />\n    </div>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport Row from \"./Row\";\nimport Banner from './Banner'\nimport \"./App.css\";\nimport NavBar from './NavBar'\nimport request from \"./requst\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <NavBar/>\n      <Banner/>\n      <Row title=\"Netflix Originals\" fetchUrl={request.fetchNetflixOriginals} isLargeRow={true}/>\n      <Row title=\"Trending Now\" fetchUrl={request.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={request.fetchTopRated} />\n      <Row title=\"Romance\" fetchUrl={request.fetchRomanceMovies} />\n      <Row title=\"Horror\" fetchUrl={request.fetchHorrorMovies} />\n      <Row title=\"Action\" fetchUrl={request.fetchActionMovies} />\n      <Row title=\"Comedy\" fetchUrl={request.fetchComedyMovies} />\n      <Row title=\"Documentary\" fetchUrl={request.fetchDocumentaries} /> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}